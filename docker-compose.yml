services:
  # FastAPI Backend Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: cosmos-coherence:dev
    container_name: cosmos-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://cosmos:cosmos@db:5432/cosmos_coherence
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./configs:/app/configs:ro
      - ./tests:/app/tests:ro
      - api-cache:/app/.cache
    networks:
      - cosmos-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["uvicorn", "src.cosmos_coherence.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Dash Dashboard Frontend Service
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: cosmos-coherence:dev
    container_name: cosmos-dashboard
    ports:
      - "8050:8050"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - API_URL=http://api:8000
      - DATABASE_URL=postgresql://cosmos:cosmos@db:5432/cosmos_coherence
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./configs:/app/configs:ro
      - dashboard-cache:/app/.cache
    networks:
      - cosmos-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "src/cosmos_coherence/dashboard/app.py"]

  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: cosmos-db
    environment:
      - POSTGRES_USER=cosmos
      - POSTGRES_PASSWORD=cosmos
      - POSTGRES_DB=cosmos_coherence
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - cosmos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cosmos -d cosmos_coherence"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: cosmos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cosmos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cosmos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - cosmos-network
    depends_on:
      - api
      - dashboard
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  cosmos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  api-cache:
    driver: local
  dashboard-cache:
    driver: local
  nginx-cache:
    driver: local
